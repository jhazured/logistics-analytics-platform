name: ML Model Training Pipeline

on:
  schedule:
    # Weekly model retraining on Sundays at 2 AM
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      model_type:
        description: 'Type of model to train'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - route_optimization
          - predictive_maintenance
      force_retrain:
        description: 'Force retrain even if model is recent'
        required: false
        default: false
        type: boolean

env:
  DBT_PROFILES_DIR: ./dbt
  DBT_PROJECT_DIR: ./dbt

jobs:
  # Route Optimization Model Training
  train_route_optimization:
    name: 游뚵 Train Route Optimization Model
    runs-on: ubuntu-latest
    if: github.event.inputs.model_type == 'all' || github.event.inputs.model_type == 'route_optimization'
    
    steps:
      - name: 游닌 Checkout code
        uses: actions/checkout@v4

      - name: 游냀 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: 游닍 Install dependencies
        run: |
          pip install --upgrade pip
          pip install pandas numpy scikit-learn joblib
          pip install snowflake-connector-python snowflake-snowpark-python
          pip install dbt-snowflake

      - name: 游댏 Set up Snowflake credentials
        env:
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
        run: |
          echo "Snowflake credentials configured"

      - name: 游빍 Run data quality checks
        run: |
          dbt test --select tag:ml_features --store-failures

      - name: 游뚵 Train Route Optimization Model
        env:
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
        run: |
          python dbt/models/ml_models/train_route_optimization_model.py

      - name: 游늵 Validate Model Deployment
        env:
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
        run: |
          python -c "
          from snowflake.snowpark import Session
          import os
          session = Session.builder.configs({
              'account': os.getenv('SNOWFLAKE_ACCOUNT'),
              'user': os.getenv('SNOWFLAKE_USER'),
              'password': os.getenv('SNOWFLAKE_PASSWORD'),
              'warehouse': 'COMPUTE_WH_MEDIUM',
              'database': 'LOGISTICS_DW_PROD',
              'schema': 'MARTS'
          }).create()
          
          # Test model prediction
          result = session.sql('SELECT predict_route_optimization(0.8, 0.2, 0.1, 0.7, 100, 8.5, 2.5, 0.95, 4.2) as prediction').collect()
          print(f'Model prediction test: {result[0][\"PREDICTION\"]}')
          session.close()
          "

      - name: 游늳 Log Training Results
        if: always()
        run: |
          echo "Route optimization model training completed"
          echo "Check Snowflake for model performance metrics"

  # Predictive Maintenance Model Training
  train_predictive_maintenance:
    name: 游댢 Train Predictive Maintenance Model
    runs-on: ubuntu-latest
    if: github.event.inputs.model_type == 'all' || github.event.inputs.model_type == 'predictive_maintenance'
    
    steps:
      - name: 游닌 Checkout code
        uses: actions/checkout@v4

      - name: 游냀 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: 游닍 Install dependencies
        run: |
          pip install --upgrade pip
          pip install pandas numpy scikit-learn joblib
          pip install snowflake-connector-python snowflake-snowpark-python
          pip install dbt-snowflake

      - name: 游댏 Set up Snowflake credentials
        env:
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
        run: |
          echo "Snowflake credentials configured"

      - name: 游빍 Run data quality checks
        run: |
          dbt test --select tag:ml_features --store-failures

      - name: 游댢 Train Predictive Maintenance Model
        env:
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
        run: |
          python dbt/models/ml_models/train_predictive_maintenance_model.py

      - name: 游늵 Validate Model Deployment
        env:
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
        run: |
          python -c "
          from snowflake.snowpark import Session
          import os
          session = Session.builder.configs({
              'account': os.getenv('SNOWFLAKE_ACCOUNT'),
              'user': os.getenv('SNOWFLAKE_USER'),
              'password': os.getenv('SNOWFLAKE_PASSWORD'),
              'warehouse': 'COMPUTE_WH_MEDIUM',
              'database': 'LOGISTICS_DW_PROD',
              'schema': 'MARTS'
          }).create()
          
          # Test model prediction
          result = session.sql('SELECT predict_maintenance_risk(1, 2020, 50000, 8.5, 4, 190, 2000, 75, 800, 5, 100, 3, 500, 90, 0.85, 8.2, 150) as prediction').collect()
          print(f'Maintenance model prediction test: {result[0][\"PREDICTION\"]}')
          session.close()
          "

      - name: 游늳 Log Training Results
        if: always()
        run: |
          echo "Predictive maintenance model training completed"
          echo "Check Snowflake for model performance metrics"

  # Model Performance Monitoring
  monitor_model_performance:
    name: 游늵 Monitor Model Performance
    runs-on: ubuntu-latest
    needs: [train_route_optimization, train_predictive_maintenance]
    if: always()
    
    steps:
      - name: 游닌 Checkout code
        uses: actions/checkout@v4

      - name: 游냀 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: 游닍 Install dependencies
        run: |
          pip install --upgrade pip
          pip install pandas numpy
          pip install snowflake-connector-python snowflake-snowpark-python

      - name: 游늵 Generate Model Performance Report
        env:
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
        run: |
          python -c "
          from snowflake.snowpark import Session
          import os
          import json
          
          session = Session.builder.configs({
              'account': os.getenv('SNOWFLAKE_ACCOUNT'),
              'user': os.getenv('SNOWFLAKE_USER'),
              'password': os.getenv('SNOWFLAKE_PASSWORD'),
              'warehouse': 'COMPUTE_WH_MEDIUM',
              'database': 'LOGISTICS_DW_PROD',
              'schema': 'MARTS'
          }).create()
          
          # Get model performance metrics
          result = session.sql('''
              SELECT 
                  model_name,
                  model_type,
                  training_date,
                  metrics,
                  status
              FROM tbl_ml_model_registry
              WHERE training_date >= DATEADD('day', -1, CURRENT_DATE())
              ORDER BY training_date DESC
          ''').collect()
          
          print('Model Performance Report:')
          for row in result:
              print(f'Model: {row[\"MODEL_NAME\"]}')
              print(f'Type: {row[\"MODEL_TYPE\"]}')
              print(f'Training Date: {row[\"TRAINING_DATE\"]}')
              print(f'Status: {row[\"STATUS\"]}')
              print(f'Metrics: {row[\"METRICS\"]}')
              print('---')
          
          session.close()
          "

      - name: 游닎 Send Performance Report
        if: always()
        run: |
          echo "Model performance monitoring completed"
          echo "Performance reports generated and logged"

  # Model A/B Testing Framework
  ab_testing:
    name: 游빍 Model A/B Testing
    runs-on: ubuntu-latest
    needs: [train_route_optimization, train_predictive_maintenance]
    if: github.event.inputs.force_retrain == 'true'
    
    steps:
      - name: 游닌 Checkout code
        uses: actions/checkout@v4

      - name: 游냀 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: 游닍 Install dependencies
        run: |
          pip install --upgrade pip
          pip install pandas numpy scikit-learn
          pip install snowflake-connector-python snowflake-snowpark-python

      - name: 游빍 Run A/B Testing
        env:
          SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
        run: |
          python -c "
          from snowflake.snowpark import Session
          import os
          
          session = Session.builder.configs({
              'account': os.getenv('SNOWFLAKE_ACCOUNT'),
              'user': os.getenv('SNOWFLAKE_USER'),
              'password': os.getenv('SNOWFLAKE_PASSWORD'),
              'warehouse': 'COMPUTE_WH_MEDIUM',
              'database': 'LOGISTICS_DW_PROD',
              'schema': 'MARTS'
          }).create()
          
          # Create A/B testing framework
          session.sql('''
              CREATE OR REPLACE TABLE model_ab_test_results (
                  test_id VARCHAR(50),
                  model_a_name VARCHAR(100),
                  model_b_name VARCHAR(100),
                  test_start_date DATE,
                  test_end_date DATE,
                  model_a_performance FLOAT,
                  model_b_performance FLOAT,
                  winner VARCHAR(100),
                  confidence_level FLOAT,
                  created_at TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP()
              )
          ''').collect()
          
          print('A/B testing framework created')
          session.close()
          "

      - name: 游늵 Log A/B Test Results
        run: |
          echo "A/B testing framework deployed"
          echo "Models ready for performance comparison"

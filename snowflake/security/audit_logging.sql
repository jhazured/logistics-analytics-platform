-- Snowflake Audit Logging Configuration
-- This script sets up comprehensive audit logging for the logistics analytics platform

-- Enable account-level audit logging
ALTER ACCOUNT SET LOG_LEVEL = 'INFO';
ALTER ACCOUNT SET LOG_RETENTION_DAYS = 90;

-- Create audit database and schema
CREATE DATABASE IF NOT EXISTS AUDIT_DB;
CREATE SCHEMA IF NOT EXISTS AUDIT_DB.AUDIT_LOGS;

-- Create audit tables for different event types
CREATE OR REPLACE TABLE AUDIT_DB.AUDIT_LOGS.ACCOUNT_EVENTS (
    EVENT_ID VARCHAR(50) DEFAULT UUID_STRING(),
    EVENT_TIMESTAMP TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    EVENT_TYPE VARCHAR(100),
    USER_NAME VARCHAR(255),
    CLIENT_IP VARCHAR(45),
    CLIENT_APPLICATION VARCHAR(255),
    QUERY_ID VARCHAR(50),
    QUERY_TEXT TEXT,
    DATABASE_NAME VARCHAR(255),
    SCHEMA_NAME VARCHAR(255),
    OBJECT_NAME VARCHAR(255),
    OBJECT_TYPE VARCHAR(50),
    OPERATION VARCHAR(50),
    SUCCESS BOOLEAN,
    ERROR_CODE VARCHAR(50),
    ERROR_MESSAGE TEXT,
    ROWS_AFFECTED NUMBER,
    EXECUTION_TIME_MS NUMBER
);

-- Create audit table for data access events
CREATE OR REPLACE TABLE AUDIT_DB.AUDIT_LOGS.DATA_ACCESS_EVENTS (
    EVENT_ID VARCHAR(50) DEFAULT UUID_STRING(),
    EVENT_TIMESTAMP TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    USER_NAME VARCHAR(255),
    ROLE_NAME VARCHAR(255),
    DATABASE_NAME VARCHAR(255),
    SCHEMA_NAME VARCHAR(255),
    TABLE_NAME VARCHAR(255),
    OPERATION VARCHAR(50),
    QUERY_ID VARCHAR(50),
    ROWS_RETURNED NUMBER,
    CLIENT_IP VARCHAR(45),
    CLIENT_APPLICATION VARCHAR(255)
);

-- Create audit table for security events
CREATE OR REPLACE TABLE AUDIT_DB.AUDIT_LOGS.SECURITY_EVENTS (
    EVENT_ID VARCHAR(50) DEFAULT UUID_STRING(),
    EVENT_TIMESTAMP TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    EVENT_TYPE VARCHAR(100),
    USER_NAME VARCHAR(255),
    ROLE_NAME VARCHAR(255),
    CLIENT_IP VARCHAR(45),
    SUCCESS BOOLEAN,
    FAILURE_REASON VARCHAR(500),
    SESSION_ID VARCHAR(100),
    QUERY_ID VARCHAR(50)
);

-- Create audit table for DDL events
CREATE OR REPLACE TABLE AUDIT_DB.AUDIT_LOGS.DDL_EVENTS (
    EVENT_ID VARCHAR(50) DEFAULT UUID_STRING(),
    EVENT_TIMESTAMP TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    USER_NAME VARCHAR(255),
    ROLE_NAME VARCHAR(255),
    DATABASE_NAME VARCHAR(255),
    SCHEMA_NAME VARCHAR(255),
    OBJECT_NAME VARCHAR(255),
    OBJECT_TYPE VARCHAR(50),
    DDL_COMMAND VARCHAR(50),
    QUERY_TEXT TEXT,
    SUCCESS BOOLEAN,
    ERROR_MESSAGE TEXT
);

-- Create audit table for data modification events
CREATE OR REPLACE TABLE AUDIT_DB.AUDIT_LOGS.DML_EVENTS (
    EVENT_ID VARCHAR(50) DEFAULT UUID_STRING(),
    EVENT_TIMESTAMP TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
    USER_NAME VARCHAR(255),
    ROLE_NAME VARCHAR(255),
    DATABASE_NAME VARCHAR(255),
    SCHEMA_NAME VARCHAR(255),
    TABLE_NAME VARCHAR(255),
    OPERATION VARCHAR(50),
    ROWS_AFFECTED NUMBER,
    QUERY_ID VARCHAR(50),
    SUCCESS BOOLEAN,
    ERROR_MESSAGE TEXT
);

-- Create views for audit reporting
CREATE OR REPLACE VIEW AUDIT_DB.AUDIT_LOGS.V_USER_ACTIVITY_SUMMARY AS
SELECT 
    USER_NAME,
    DATE(EVENT_TIMESTAMP) as ACTIVITY_DATE,
    COUNT(*) as TOTAL_EVENTS,
    COUNT(DISTINCT QUERY_ID) as UNIQUE_QUERIES,
    SUM(CASE WHEN SUCCESS = TRUE THEN 1 ELSE 0 END) as SUCCESSFUL_OPERATIONS,
    SUM(CASE WHEN SUCCESS = FALSE THEN 1 ELSE 0 END) as FAILED_OPERATIONS,
    AVG(EXECUTION_TIME_MS) as AVG_EXECUTION_TIME_MS
FROM AUDIT_DB.AUDIT_LOGS.ACCOUNT_EVENTS
WHERE EVENT_TIMESTAMP >= DATEADD('day', -30, CURRENT_DATE())
GROUP BY USER_NAME, DATE(EVENT_TIMESTAMP)
ORDER BY ACTIVITY_DATE DESC, TOTAL_EVENTS DESC;

CREATE OR REPLACE VIEW AUDIT_DB.AUDIT_LOGS.V_DATA_ACCESS_SUMMARY AS
SELECT 
    DATABASE_NAME,
    SCHEMA_NAME,
    TABLE_NAME,
    USER_NAME,
    DATE(EVENT_TIMESTAMP) as ACCESS_DATE,
    COUNT(*) as ACCESS_COUNT,
    SUM(ROWS_RETURNED) as TOTAL_ROWS_ACCESSED
FROM AUDIT_DB.AUDIT_LOGS.DATA_ACCESS_EVENTS
WHERE EVENT_TIMESTAMP >= DATEADD('day', -30, CURRENT_DATE())
GROUP BY DATABASE_NAME, SCHEMA_NAME, TABLE_NAME, USER_NAME, DATE(EVENT_TIMESTAMP)
ORDER BY ACCESS_DATE DESC, ACCESS_COUNT DESC;

CREATE OR REPLACE VIEW AUDIT_DB.AUDIT_LOGS.V_SECURITY_ALERTS AS
SELECT 
    EVENT_TIMESTAMP,
    EVENT_TYPE,
    USER_NAME,
    CLIENT_IP,
    FAILURE_REASON,
    SESSION_ID
FROM AUDIT_DB.AUDIT_LOGS.SECURITY_EVENTS
WHERE SUCCESS = FALSE
    AND EVENT_TIMESTAMP >= DATEADD('day', -7, CURRENT_DATE())
ORDER BY EVENT_TIMESTAMP DESC;

-- Create stored procedure for audit log cleanup
CREATE OR REPLACE PROCEDURE AUDIT_DB.AUDIT_LOGS.CLEANUP_OLD_AUDIT_LOGS(RETENTION_DAYS NUMBER)
RETURNS STRING
LANGUAGE SQL
AS
$$
DECLARE
    cutoff_date DATE;
    deleted_count NUMBER;
BEGIN
    cutoff_date := DATEADD('day', -RETENTION_DAYS, CURRENT_DATE());
    
    -- Clean up account events
    DELETE FROM AUDIT_DB.AUDIT_LOGS.ACCOUNT_EVENTS 
    WHERE DATE(EVENT_TIMESTAMP) < cutoff_date;
    deleted_count := SQL%ROWCOUNT;
    
    -- Clean up data access events
    DELETE FROM AUDIT_DB.AUDIT_LOGS.DATA_ACCESS_EVENTS 
    WHERE DATE(EVENT_TIMESTAMP) < cutoff_date;
    deleted_count := deleted_count + SQL%ROWCOUNT;
    
    -- Clean up security events
    DELETE FROM AUDIT_DB.AUDIT_LOGS.SECURITY_EVENTS 
    WHERE DATE(EVENT_TIMESTAMP) < cutoff_date;
    deleted_count := deleted_count + SQL%ROWCOUNT;
    
    -- Clean up DDL events
    DELETE FROM AUDIT_DB.AUDIT_LOGS.DDL_EVENTS 
    WHERE DATE(EVENT_TIMESTAMP) < cutoff_date;
    deleted_count := deleted_count + SQL%ROWCOUNT;
    
    -- Clean up DML events
    DELETE FROM AUDIT_DB.AUDIT_LOGS.DML_EVENTS 
    WHERE DATE(EVENT_TIMESTAMP) < cutoff_date;
    deleted_count := deleted_count + SQL%ROWCOUNT;
    
    RETURN 'Cleaned up ' || deleted_count || ' audit log records older than ' || RETENTION_DAYS || ' days';
END;
$$;

-- Create task for automated audit log cleanup (runs weekly)
CREATE OR REPLACE TASK AUDIT_DB.AUDIT_LOGS.AUDIT_CLEANUP_TASK
WAREHOUSE = COMPUTE_WH_XS
SCHEDULE = 'USING CRON 0 2 * * 0 UTC'  -- Every Sunday at 2 AM UTC
COMMENT = 'Automated cleanup of old audit logs'
AS
CALL AUDIT_DB.AUDIT_LOGS.CLEANUP_OLD_AUDIT_LOGS(90);

-- Grant permissions for audit database
GRANT USAGE ON DATABASE AUDIT_DB TO ROLE DATA_ENGINEER;
GRANT USAGE ON SCHEMA AUDIT_DB.AUDIT_LOGS TO ROLE DATA_ENGINEER;
GRANT SELECT ON ALL TABLES IN SCHEMA AUDIT_DB.AUDIT_LOGS TO ROLE DATA_ENGINEER;
GRANT SELECT ON ALL VIEWS IN SCHEMA AUDIT_DB.AUDIT_LOGS TO ROLE DATA_ENGINEER;

-- Grant permissions for security team
GRANT USAGE ON DATABASE AUDIT_DB TO ROLE DATA_STEWARD;
GRANT USAGE ON SCHEMA AUDIT_DB.AUDIT_LOGS TO ROLE DATA_STEWARD;
GRANT SELECT ON ALL TABLES IN SCHEMA AUDIT_DB.AUDIT_LOGS TO ROLE DATA_STEWARD;
GRANT SELECT ON ALL VIEWS IN SCHEMA AUDIT_DB.AUDIT_LOGS TO ROLE DATA_STEWARD;

-- Enable the cleanup task
ALTER TASK AUDIT_DB.AUDIT_LOGS.AUDIT_CLEANUP_TASK RESUME;

-- Create alert for failed login attempts
CREATE OR REPLACE ALERT AUDIT_DB.AUDIT_LOGS.FAILED_LOGIN_ALERT
WAREHOUSE = COMPUTE_WH_XS
SCHEDULE = '5 MINUTE'
COMMENT = 'Alert for multiple failed login attempts'
IF (
    SELECT COUNT(*)
    FROM AUDIT_DB.AUDIT_LOGS.SECURITY_EVENTS
    WHERE EVENT_TYPE = 'LOGIN_FAILED'
        AND EVENT_TIMESTAMP >= DATEADD('minute', -5, CURRENT_TIMESTAMP())
) > 5
THEN
    CALL SYSTEM$SEND_EMAIL(
        'security-team@company.com',
        'Multiple Failed Login Attempts Detected',
        'Multiple failed login attempts detected in the last 5 minutes. Please investigate.'
    );

-- Enable the alert
ALTER ALERT AUDIT_DB.AUDIT_LOGS.FAILED_LOGIN_ALERT RESUME;
